import random

# Constants for the board
EMPTY = ' '
PLAYER_X = 'X'
PLAYER_O = 'O'

# Define the winning combinations
WINNING_COMBINATIONS = [[(0, 0), (0, 1), (0, 2)], [(1, 0), (1, 1), (1, 2)],
                        [(2, 0), (2, 1), (2, 2)], [(0, 0), (1, 0), (2, 0)],
                        [(0, 1), (1, 1), (2, 1)], [(0, 2), (1, 2), (2, 2)],
                        [(0, 0), (1, 1), (2, 2)], [(0, 2), (1, 1), (2, 0)]]

# Define the initial game state
INITIAL_STATE = [[EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY],
                 [EMPTY, EMPTY, EMPTY]]


# Function to print the Tic-Tac-Toe board
def print_board(board):
  for row in board:
    print(' | '.join(row))
    print('-' * 9)


# Function to check if a player has won
def check_winner(board, player):
  for combination in WINNING_COMBINATIONS:
    if all(board[row][col] == player for row, col in combination):
      return True
  return False


# Function to check if the game is a draw
def is_draw(board):
  return all(board[row][col] != EMPTY for row in range(3) for col in range(3))


# Function to evaluate the current state of the game
def evaluate(board):
  if check_winner(board, PLAYER_X):
    return 1
  elif check_winner(board, PLAYER_O):
    return -1
  else:
    return 0


# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, maximizing_player, alpha, beta):
  if check_winner(board, PLAYER_X):
    return 1
  elif check_winner(board, PLAYER_O):
    return -1
  elif is_draw(board):
    return 0

  if maximizing_player:
    max_eval = float('-inf')
    for row in range(3):
      for col in range(3):
        if board[row][col] == EMPTY:
          board[row][col] = PLAYER_X
          eval = minimax(board, depth + 1, False, alpha, beta)
          board[row][col] = EMPTY
          max_eval = max(max_eval, eval)
          alpha = max(alpha, eval)
          if beta <= alpha:
            break
    return max_eval
  else:
    min_eval = float('inf')
    for row in range(3):
      for col in range(3):
        if board[row][col] == EMPTY:
          board[row][col] = PLAYER_O
          eval = minimax(board, depth + 1, True, alpha, beta)
          board[row][col] = EMPTY
          min_eval = min(min_eval, eval)
          beta = min(beta, eval)
          if beta <= alpha:
            break
    return min_eval


# Function to make the AI move
def ai_move(board):
  best_move = None
  best_eval = float('-inf')
  alpha = float('-inf')
  beta = float('inf')

  for row in range(3):
    for col in range(3):
      if board[row][col] == EMPTY:
        board[row][col] = PLAYER_X
        eval = minimax(board, 0, False, alpha, beta)
        board[row][col] = EMPTY

        if eval > best_eval:
          best_eval = eval
          best_move = (row, col)

  return best_move


# Main game loop
def main():
  board = INITIAL_STATE
  current_player = PLAYER_X

  while True:
    print_board(board)

    if current_player == PLAYER_X:
      row, col = ai_move(board)
      print(f"AI (X) chooses row {row + 1}, col {col + 1}")
    else:
      while True:
        try:
          row = int(input("Enter row (1, 2, or 3): ")) - 1
          col = int(input("Enter col (1, 2, or 3): ")) - 1

          if board[row][col] == EMPTY:
            break
          else:
            print("Invalid move. Try again.")
        except ValueError:
          print("Invalid input. Please enter a number between 1 and 3.")

    if board[row][col] == EMPTY:
      board[row][col] = current_player

    if check_winner(board, current_player):
      print_board(board)
      print(f"{current_player} wins!")
      break
    elif is_draw(board):
      print_board(board)
      print("It's a draw!")
      break

    current_player = PLAYER_X if current_player == PLAYER_O else PLAYER_O


if __name__ == "__main__":
  main()
